# üî• ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏ß‡∏¢ Association Rule (‡∏à‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ó‡∏≥‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô)
# ‚úÖ ‡πÉ‡∏ä‡πâ Python + pandas + mlxtend (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô)

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô Terminal (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
# pip install pandas mlxtend

import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules
from mlxtend.preprocessing import TransactionEncoder

# üîπ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° log ‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö)
logs = [
    ["‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π", "‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡∏´‡∏°‡∏π", "‡∏ï‡πâ‡∏°‡πÅ‡∏ã‡πà‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏≠‡πà‡∏≠‡∏ô"],
    ["‡∏´‡∏°‡∏π‡∏ú‡∏±‡∏î‡∏û‡∏£‡∏¥‡∏Å", "‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏°‡∏π"],
    ["‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π", "‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î", "‡∏ï‡πâ‡∏°‡πÅ‡∏ã‡πà‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏≠‡πà‡∏≠‡∏ô"],
    ["‡∏´‡∏°‡∏π‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏°‡∏π", "‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡∏´‡∏°‡∏π"],
    ["‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏°‡∏π", "‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß", "‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö"],
    ["‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡∏´‡∏°‡∏π", "‡∏´‡∏°‡∏π‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏¥‡πâ‡∏°‡πÅ‡∏à‡πà‡∏ß", "‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß"],
    ["‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π", "‡∏ï‡πâ‡∏°‡πÅ‡∏ã‡πà‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏≠‡πà‡∏≠‡∏ô", "‡∏´‡∏°‡∏π‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏¥‡πâ‡∏°‡πÅ‡∏à‡πà‡∏ß"],
    ["‡∏ï‡πâ‡∏°‡πÅ‡∏ã‡πà‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏≠‡πà‡∏≠‡∏ô", "‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö"],
    ["‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π", "‡∏´‡∏°‡∏π‡∏ú‡∏±‡∏î‡∏û‡∏£‡∏¥‡∏Å"],
    ["‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡∏´‡∏°‡∏π", "‡∏´‡∏°‡∏π‡∏ú‡∏±‡∏î‡∏û‡∏£‡∏¥‡∏Å"]
]

# üîπ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
te = TransactionEncoder()
te_ary = te.fit(logs).transform(logs)
df = pd.DataFrame(te_ary, columns=te.columns_)

# üîπ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÉ‡∏ä‡πâ Apriori ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏£‡πà‡∏ß‡∏°
frequent_itemsets = apriori(df, min_support=0.3, use_colnames=True)

# üîπ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏é‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π (Association Rules)
rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=0.7)

# üîπ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
def show_rules(rules_df):
    for _, row in rules_df.iterrows():
        antecedents = ', '.join(list(row["antecedents"]))
        consequents = ', '.join(list(row["consequents"]))
        confidence = round(row["confidence"] * 100, 2)
        print(f"‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: [{antecedents}] ‚Üí ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: [{consequents}] (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {confidence}%)")

show_rules(rules)